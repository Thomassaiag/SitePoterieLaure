name: Site Web Laure CI/CD pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: [main]
  workflow_dispatch:


env:
  POSTGRES_DB: ${DBNAME}
  POSTGRES_USER: ${DBUSER}
  POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  NODE_ENV: test

jobs:

  #tests

  build:
    #needs: tests

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3

      #login to docker hub
      - name: sitepoterielaure
        uses: docker/login-action@v2
        with:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}


      #build and push server image
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with: 
          context: ./server
          push: true
          tags: thomassaiag/siteweblaure-server:latest

      #build and push client image
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: thomassaiag/sitweblaure-client:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest

    if: github.ref=='refs/heads/main'

    steps:
      #install SSH Key
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{secrets.SSH_PRIVATE_KEY}}
        known_hosts: unnecessary
    

    #Add Server to known hosts
    - name: Add Server to known hosts
      run: ssh-keyscan -H 188.165.238.74 >> ~/.ssh/known_hosts

    #login to Docker Hub from Server
    - name: Docker Login from Server
      env: 
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        ssh debian@188.165.238.74 "echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin"


    # Pull and run Docker images
    - name: Deploy with Docker
      run: |
        ssh debian@188.165.238.74 << EOF
          # Pull the latest images
          docker pull thomassaiag/siteweblaure-server:latest
          docker pull thomassaiag/sitweblaure-client:latest

          # Stop and remove existing containers if they exist
          docker stop siteweblaure-server || true
          docker stop siteweblaure-client || true
          docker rm siteweblaure-server || true
          docker rm siteweblaure-client || true

          # Run new containers
          docker run -d --name siteweblaure-server \
            -p 3001:3001 \
            -e NODE_ENV=production \
            thomassaiag/siteweblaure-server:latest

          docker run -d --name siteweblaure-client \
            -p 3000:3000 \
            thomassaiag/sitweblaure-client:latest
        EOF

