name: Site Web Laure CI/CD pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: [main]
  workflow_dispatch:


env:
  POSTGRES_DB: ${DBNAME}
  POSTGRES_USER: ${DBUSER}
  POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  NODE_ENV: test

jobs:

  #tests

  build:
    #needs: tests

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: List root directory contents
        run: ls -la

      - name: List server directory contents
        run: ls -la ./server

      - name: Print Dockerfile.postgres contents
        run: cat ./server/Dockerfile.postgres

      #login to docker hub
      - name: sitepoterielaure
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}


      #build and push DB image
      - name: Build and push DB image
        uses: docker/build-push-action@v4
        with: 
          context: .
          file: ./server/Dockerfile.postgres
          push: true
          tags: thomassaiag/siteweblaure-postgres:latest
          no-cache: true

      #build and push server image
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with: 
          context: ./server
          file: Dockerfile
          push: true
          tags: thomassaiag/siteweblaure-server:latest

      #build and push client image
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: thomassaiag/siteweblaure-client:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest

    if: github.ref=='refs/heads/main'

    steps:
      - uses: actions/checkout@v3
      
      #Copy Docker compose to server
      - name: Copy Docker compose file to server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.prod.yml debian@188.165.238.74:~/ThomasS/SitePoterie/
      
      
      #login to Docker Hub from Server
      - name: Docker Login from Server
        env: 
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no debian@188.165.238.74 \
          "mkdir -p ~/ThomasS/SitePoterie && \
          echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin"

      # deploy using Docker Compose file
      - name: Deploy with Docker Compose
        env: 
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no debian@188.165.238.74 << EOF
            cd ~/ThomasS/SitePoterie
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
          EOF